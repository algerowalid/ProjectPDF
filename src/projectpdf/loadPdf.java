/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package projectpdf;

import org.icepdf.ri.common.SwingController;
import org.icepdf.ri.common.SwingViewBuilder;
       
import chrriis.dj.nativeswing.swtimpl.components.JWebBrowser;
import com.adobe.acrobat.Viewer;
import java.awt.AWTException;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import org.icepdf.core.exceptions.PDFException;
import org.icepdf.core.exceptions.PDFSecurityException;
import org.icepdf.core.pobjects.Document;
import org.icepdf.core.pobjects.Page;
import org.icepdf.core.util.GraphicsRenderingHints;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.DocFlavor.URL;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.icepdf.core.pobjects.graphics.text.PageText;
import org.icepdf.ri.common.SwingController;
import org.icepdf.ri.common.SwingViewBuilder;
import org.icepdf.ri.util.PropertiesManager;
/**
 *
 * @author Eurequat-Algerie
 */
public class loadPdf extends javax.swing.JFrame {
    private InputStream MY_PDF_AS_STREAM;

         
    
    /**
     * Creates new form loadPdf
     */
    public loadPdf() {
        
         setExtendedState(JFrame.MAXIMIZED_BOTH);  
    /*    JFrame innerFrame = new JFrame();
        JLabel a = new JLabel();
        a.setText("waliiiiiiiiiiiiid");
        innerFrame.add(a);
        innerFrame.setSize(300, 200);
        innerFrame.setVisible(true);
        */initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        b1 = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        b2 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        b1.setText("jButton1");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1064, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        b2.setText("jButton2");
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b3.setText("jButton3");
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(b1)
                    .addComponent(b2)
                    .addComponent(b3))
                .addGap(18, 18, 18)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(b1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(743, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed



String filename = "d:/test-001.pdf";
PDFDocument pdf = new PDFDocument( filename );

    // Create our frame
    
    // Create our frame
    JFrame frame = new JFrame( "PDF Viewer" );
    frame.setSize( 1024, 768 );
    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
    frame.setLocation( d.width/2 - 512, d.height/2 - 384 );
    frame.getContentPane().add( pdf );
    frame.setDefaultCloseOperation( JFrame.DISPOSE_ON_CLOSE );
    frame.setVisible( true );
    
    




/*
Document document = new Document();
        try {
            document.setFile(filePath);
        } catch (PDFException ex) {
            Logger.getLogger(loadPdf.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PDFSecurityException ex) {
            Logger.getLogger(loadPdf.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(loadPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
*/
   
       // Capturing images But not gooooood 
                /*
// Get the images for a single page
Enumeration tmpImages = document.getPageImages(0).elements();
// Save the images as JPEGs
int count = 0;
while (tmpImages.hasMoreElements()){
 Image image = (Image) tmpImages.nextElement();
 // create new buffered image to paint to.
 BufferedImage bufferedImage = new BufferedImage(
 image.getWidth(this), image.getHeight(this), BufferedImage.TYPE_INT_RGB);
 Graphics2D g2d = bufferedImage.createGraphics();
 g2d.drawImage(image, 0, 0, image.getWidth(this), image.getHeight(this), this);
 RenderedImage rendImage = bufferedImage;
 try {
 // Save as JPEG
 File file = new File("d:/les images/newimage_" + count + ".png");
 ImageIO.write(rendImage, "png", file);
 } catch (IOException e) {
 e.printStackTrace();
 }
 g2d.dispose();
 bufferedImage.flush();
}
// Clean up document resources
document.dispose();
     */   
        System.out.println("Finish!!");
        
        
    // Extracting text from PDF ONLY PDF    
  /*      // load the file
String filePath = "d:/test-002.pdf";
Document document = new Document();
        try {
            document.setFile(filePath);
        } catch (PDFException ex) {
            Logger.getLogger(loadPdf.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PDFSecurityException ex) {
            Logger.getLogger(loadPdf.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(loadPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
try {
 // create an output file
 FileOutputStream fileOutputStream = new FileOutputStream( "extracted.txt");
 PageText pageText = document.getPageText(0);
 if (pageText != null && pageText.getPageLines() != null) {
 fileOutputStream.write(pageText.toString().getBytes());
 }
 fileOutputStream.close();
} catch (IOException e) {
 e.printStackTrace();
} finally {
 // clean up the document resources document.dispose();
}*/
        
        
        
 // capturing and Converting to JPEG 
        /*
// Get a file from the command line to open
 String filePath = "d:/test-001.pdf";
 // open the file
 Document document = new Document();
 try {
 document.setFile(filePath);
 } catch (PDFException ex) {
 System.out.println("Error parsing PDF document " + ex);
 } catch (PDFSecurityException ex) {
 System.out.println("Error encryption not supported " + ex);
 } catch (FileNotFoundException ex) {
 System.out.println("Error file not found " + ex);
 } catch (IOException ex) {
 System.out.println("Error IOException " + ex);
 }
 // save page captures to file.
 float scale = 1.0f;
 float rotation = 0f;
 // Paint each pages content to an image and
 // write the image to file
 for (int i = 0; i < document.getNumberOfPages(); i++) {
 BufferedImage image = (BufferedImage) document.getPageImage(
 i, GraphicsRenderingHints.PRINT, Page.BOUNDARY_CROPBOX, rotation, scale);
 RenderedImage rendImage = image;
 try {
 System.out.println(" capturing page " + i);
 File file = new File("imageCapture1_" + i + ".png");
 ImageIO.write(rendImage, "png", file);
 } catch (IOException e) {
 e.printStackTrace();
 }
 image.flush();
 }
 // clean up resources
 document.dispose();
 
 System.out.println("finish !!");

        */
        
        // TODO add your handling code here:
    }//GEN-LAST:event_b1ActionPerformed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed

        // TODO add your handling code here:
    }//GEN-LAST:event_formMousePressed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed

String filename = "d:/test-001.pdf";
SwingController controller = new SwingController(); 
SwingViewBuilder factory = new SwingViewBuilder(controller);
JPanel viewerComponentPanel = factory.buildViewerPanel(); 

panel.add(viewerComponentPanel,null);
repaint();
// optional open a document 
controller.openDocument(filename);



        
        // TODO add your handling code here:
    }//GEN-LAST:event_b2ActionPerformed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased

 
        
        
        
        /*
        Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
BufferedImage capture;
        try {
            capture = new Robot().createScreenCapture(screenRect);
            try {
                ImageIO.write(capture, "bmp", new File("d:/les images/scr.bmp"));
            } catch (IOException ex) {
                Logger.getLogger(loadPdf.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (AWTException ex) {
            Logger.getLogger(loadPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
*/
        
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseReleased

    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b3ActionPerformed
String filePath = "d:/test-002.pdf";
Document document = new Document();
        try {
            document.setFile(filePath);
        } catch (PDFException ex) {
            Logger.getLogger(loadPdf.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PDFSecurityException ex) {
            Logger.getLogger(loadPdf.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(loadPdf.class.getName()).log(Level.SEVERE, null, ex);
        }
        
SwingController controller = new SwingController();
SwingViewBuilder factory = new SwingViewBuilder(controller);
JPanel viewerComponentPanel = factory.buildViewerPanel(); 
panel.add(viewerComponentPanel, "");

controller.openDocument(filePath);
repaint();
validate();
       
        // TODO add your handling code here:
    }//GEN-LAST:event_b3ActionPerformed

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        // TODO add your handling code here:
        
        

        
    }//GEN-LAST:event_formMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(loadPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(loadPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(loadPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(loadPdf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               //new loadPdf().setVisible(true);
            
             try {
                  loadPdf outerFrame = new loadPdf();
                  outerFrame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables


public class PDFDocument extends JPanel{
  private Viewer viewer;

  public PDFDocument( String filename )
  {
    // Set the layout for this panel
    this.setLayout( new BorderLayout() );

    // Create the viewer
    try
    {
      viewer = new Viewer();
      FileInputStream fis = new FileInputStream( filename );
      viewer.setDocumentInputStream( fis );
      this.add( viewer, BorderLayout.CENTER );
      viewer.activate();

      String page1 = viewer.getTextForPage( 0 );
      System.out.println( "page1: \n" + page1 );
    }
    catch( Exception e )
    {
      e.printStackTrace();
    }
  }
  
}
}

